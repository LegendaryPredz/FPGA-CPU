// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/14/2019 00:14:14"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg Cin;
reg s0;
reg s1;
// wires                                               
wire a0_out;
wire a_out;
wire b0_out;
wire b_out;
wire c0_out;
wire c_out;
wire Cout;
wire d0_out;
wire d_out;
wire e0_out;
wire e_out;
wire [7:0] F;
wire f0_out;
wire f_out;
wire g0_out;
wire g_out;

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.a0_out(a0_out),
	.a_out(a_out),
	.B(B),
	.b0_out(b0_out),
	.b_out(b_out),
	.c0_out(c0_out),
	.c_out(c_out),
	.Cin(Cin),
	.Cout(Cout),
	.d0_out(d0_out),
	.d_out(d_out),
	.e0_out(e0_out),
	.e_out(e_out),
	.F(F),
	.f0_out(f0_out),
	.f_out(f_out),
	.g0_out(g0_out),
	.g_out(g_out),
	.s0(s0),
	.s1(s1)
);
initial 
begin 
#200000 $finish;
end 

// s0
initial
begin
	s0 = 1'b0;
	s0 = #100000 1'b1;
end 

// s1
initial
begin
	s1 = 1'b0;
	s1 = #50000 1'b1;
	s1 = #50000 1'b0;
	s1 = #50000 1'b1;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

// Cin
initial
begin
	Cin = 1'b0;
	Cin = #100000 1'b1;
end 
endmodule

